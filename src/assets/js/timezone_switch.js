/* ----------------------------------------------------------------------------
 * TekhneeAppointments - An extensive fork of EasyAppointments for locale-sensitive round-the-clock operations.
 * Timezone picker component
 * @author      Tekhnee
 * @copyright   Copyright (c) 2019 - 2020 Tekhnee
 *
 * @license     http://opensource.org/licenses/aGPL-3.0 - aGPLv3
 * @link        https://github.com/tekhnee/appointments/
 * @since       v1.0.0
 * ---------------------------------------------------------------------------- */
"use strict";

var tz_init = function() {
  // Guess the client's timezone.
  GlobalVariables.timezone = moment.tz.guess(); // Initialize the selector with timezone as guessed by moment.js.

  $.when(
    $.get("/assets/ext/cldr-core/supplemental/likelySubtags.json"),
    $.get(
      "/assets/ext/cldr-dates-full-main/" + GlobalVariables.availableLanguages[GlobalVariables.language][3] + "/timeZoneNames.json"
    ),
    $.get(
      "/assets/ext/cldr-localenames-full-main/" + GlobalVariables.availableLanguages[GlobalVariables.language][3] + "/territories.json"
    ),
    $.get("/assets/ext/cldr-localenames-full-main/" + "en-US-POSIX" + "/territories.json"),
    $.get("/assets/ext/tz_mappings/tz_mappings.json")
  ).then(function(
    subtags,
    cityNamesTree,
    territories,
    territories_en,
    tz_mappings
  ) {
    // Load CLDR data.
    Cldr.load(
      [subtags[0]]
        .concat([cityNamesTree[0]])
        .concat([territories[0]])
        .concat([territories_en[0]])
    ); // Create new CLDR instance.

    GlobalVariables.cldr = new Cldr(GlobalVariables.language);
    GlobalVariables.cldr_en = new Cldr("en-US-POSIX"); // Many timezone-js generated timezones are inconvenient to translate or redundant.

    var exclusions_regex = RegExp(/^Etc\/GMT.*/m); // Exclude the following from the list generated by `moment.tz.names()`.

    var exclusions = [
      "AC",
      "ACT",
      "Africa/Addis_Ababa",
      "Africa/Asmara",
      "Africa/Asmera",
      "Africa/Bamako",
      "Africa/Bangui",
      "Africa/Banjul",
      "Africa/Blantyre",
      "Africa/Brazzaville",
      "Africa/Bujumbura",
      "Africa/Conakry",
      "Africa/Dakar",
      "Africa/Dar_es_Salaam",
      "Africa/Djibouti",
      "Africa/Douala",
      "Africa/Freetown",
      "Africa/Gaborone",
      "Africa/Harare",
      "Africa/Kampala",
      "Africa/Kigali",
      "Africa/Kinshasa",
      "Africa/Libreville",
      "Africa/Lome",
      "Africa/Luanda",
      "Africa/Lubumbashi",
      "Africa/Lusaka",
      "Africa/Malabo",
      "Africa/Maseru",
      "Africa/Mbabane",
      "Africa/Mogadishu",
      "Africa/Niamey",
      "Africa/Nouakchott",
      "Africa/Ouagadougou",
      "Africa/Porto-Novo",
      "Africa/Sao_Tome",
      "Africa/Timbuktu",
      "America/Anguilla",
      "America/Antigua",
      "America/Argentina/ComodRivadavia",
      "America/Aruba",
      "America/Atka",
      "America/Buenos_Aires",
      "America/Catamarca",
      "America/Cayman",
      "America/Coral_Harbour",
      "America/Cordoba",
      "America/Dominica",
      "America/Ensenada",
      "America/Fort_Wayne",
      "America/Grenada",
      "America/Guadeloupe",
      "America/Indianapolis",
      "America/Jujuy",
      "America/Knox_IN",
      "America/Kralendijk",
      "America/Louisville",
      "America/Lower_Princes",
      "America/Marigot",
      "America/Mendoza",
      "America/Montreal",
      "America/Montserrat",
      "America/Porto_Acre",
      "America/Rosario",
      "America/Santa_Isabel",
      "America/Shiprock",
      "America/St_Barthelemy",
      "America/St_Kitts",
      "America/St_Lucia",
      "America/St_Thomas",
      "America/St_Vincent",
      "America/Tortola",
      "America/Virgin",
      "Antarctica/McMurdo",
      "Antarctica/South_Pole",
      "Arctic/Longyearbyen",
      "Asia/Aden",
      "Asia/Ashkhabad",
      "Asia/Bahrain",
      "Asia/Calcutta",
      "Asia/Chongqing",
      "Asia/Chungking",
      "Asia/Dacca",
      "Asia/Harbin",
      "Asia/Istanbul",
      "Asia/Kashgar",
      "Asia/Katmandu",
      "Asia/Kuwait",
      "Asia/Macao",
      "Asia/Macau",
      "Asia/Muscat",
      "Asia/Phnom_Penh",
      "Asia/Rangoon",
      "Asia/Saigon",
      "Asia/Tel_Aviv",
      "Asia/Thimbu",
      "Asia/Ujung_Pandang",
      "Asia/Ulan_Bator",
      "Asia/Vientiane",
      "Asmara",
      "Atlantic/Faeroe",
      "Atlantic/Jan_Mayen",
      "Atlantic/St_Helena",
      "Australia/ACT",
      "Australia/Canberra",
      "Australia/LHI",
      "Australia/NSW",
      "Australia/North",
      "Australia/Queensland",
      "Australia/South",
      "Australia/Tasmania",
      "Australia/Victoria",
      "Australia/West",
      "Australia/Yancowinna",
      "Brazil/Acre",
      "Brazil/DeNoronha",
      "Brazil/East",
      "Brazil/West",
      "CET",
      "CST6CDT",
      "Canada/Atlantic",
      "Canada/Central",
      "Canada/Eastern",
      "Canada/Mountain",
      "Canada/Newfoundland",
      "Canada/Pacific",
      "Canada/Saskatchewan",
      "Canada/Yukon",
      "Center",
      "ChST",
      "Chile/Continental",
      "Chile/EasterIsland",
      "Cuba",
      "EET",
      "EST",
      "EST5EDT",
      "Egypt",
      "Eire",
      "Etc/Greenwich",
      "Etc/UCT",
      "Etc/Universal",
      "Etc/Zulu",
      "Europe/Belfast",
      "Europe/Bratislava",
      "Europe/Busingen",
      "Europe/Guernsey",
      "Europe/Isle_of_Man",
      "Europe/Jersey",
      "Europe/Ljubljana",
      "Europe/Mariehamn",
      "Europe/Nicosia",
      "Europe/Podgorica",
      "Europe/San_Marino",
      "Europe/Sarajevo",
      "Europe/Skopje",
      "Europe/Tiraspol",
      "Europe/Vaduz",
      "Europe/Vatican",
      "Europe/Zagreb",
      "GB",
      "GB-Eire",
      "GMT",
      "GMT+0",
      "GMT-0",
      "GMT0",
      "GMTâˆ’0",
      "Greenwich",
      "HST",
      "Hongkong",
      "Iceland",
      "Indian/Antananarivo",
      "Indian/Comoro",
      "Indian/Mayotte",
      "Iran",
      "Israel",
      "Jamaica",
      "Japan",
      "Kwajalein",
      "LHI",
      "Libya",
      "MET",
      "MSK",
      "MST",
      "MST7MDT",
      "Mexico/BajaNorte",
      "Mexico/BajaSur",
      "Mexico/General",
      "NSW",
      "NZ",
      "NZ-CHAT",
      "Navajo",
      "PRC",
      "PST8PDT",
      "Pacific/Johnston",
      "Pacific/Midway",
      "Pacific/Ponape",
      "Pacific/Saipan",
      "Pacific/Samoa",
      "Pacific/Truk",
      "Pacific/Yap",
      "Poland",
      "Portugal",
      "ROC",
      "ROK",
      "Singapore",
      "Turkey",
      "UCT",
      "US/Alaska",
      "US/Aleutian",
      "US/Arizona",
      "US/Central",
      "US/East-Indiana",
      "US/Eastern",
      "US/Hawaii",
      "US/Indiana-Starke",
      "US/Michigan",
      "US/Mountain",
      "US/Pacific",
      "US/Pacific-New",
      "US/Samoa",
      "Universal",
      "UTC",
      "W-SU",
      "WET",
      "West",
      "Zulu"
    ];

    function i18nize(tz) {
      var s = ""; // Check for anything not under zone/etc (these have priority):

      if (
        GlobalVariables.cldr.main(
          "dates/timeZoneNames/zone/" + tz + "/long/standard"
        )
      ) {
        s += GlobalVariables.cldr.main("dates/timeZoneNames/zone/" + tz).long
          .standard; // This is for UTC.
      } // Otherwise proceed to translate the city name:
      else if (GlobalVariables.cldr.main("dates/timeZoneNames/zone/" + tz)) {
        s +=
          GlobalVariables.cldr.main("dates/timeZoneNames/zone/" + tz)
            .exemplarCity ||
          GlobalVariables.cldr.main("dates/timeZoneNames/zone/" + tz).short
            .generic ||
          GlobalVariables.cldr.main("dates/timeZoneNames/zone/" + tz).short
            .standard;
      } // Some cities are not translated and should be rendered in English.
      else {
        s +=
          tz
            .split("/")
            .slice(-1)[0]
            .substring(0, 3) !== "GMT"
            ? tz
                .split("/")
                .slice(-1)[0]
                .replace("_", " ")
            : "";
      }

      return s;
    } // Populate <select> control.

    var data = moment.tz
      .names() // Content from momentjs.
      // filter out exclusions
      .filter(function(tz) {
        return !exclusions.includes(tz) && !exclusions_regex.test(tz);
      })
      .reduce(function(memo, tz) {
        memo.push({
          name: tz,
          i18name: i18nize(tz),
          country:
            tz in tz_mappings[0].zones
              ? GlobalVariables.cldr.main("localeDisplayNames/territories")[
                  tz_mappings[0].zones[tz].countries[0]
                ]
              : "",
          country_en:
            tz in tz_mappings[0].zones
              ? GlobalVariables.cldr_en.main("localeDisplayNames/territories")[
                  tz_mappings[0].zones[tz].countries[0]
                ]
              : ""
        });
        return memo;
      }, [])
      .sort(function(a, b) {
        return new Intl.Collator(GlobalVariables.language).compare(
          a.i18name,
          b.i18name
        );
      })
      .reduce(function(memo, tz) {
        memo.push({
          id: tz.name,
          country: tz.country,
          country_en: tz.country_en,
          text: tz.i18name
        });
        return memo;
      }, []); // Group timezones by country and sort.

    data = _groupBy("country")(data).sort(function(a, b) {
      return new Intl.Collator(GlobalVariables.language).compare(
        a.text,
        b.text
      );
    }); // Construct and mount HTML component.

    $(".js-Selector").select2({
      data: data,
      matcher: _matcher,
      templateResult: _format_tz,
      templateSelection: _format_tz,
      width: "280px",
      theme: "bootstrap",
      language: GlobalVariables.availableLanguages[GlobalVariables.language][5]
    }); // Initialize the selector with the detected timezone.

    $(".js-Selector")
      .val(GlobalVariables.timezone)
      .trigger("change.select2"); // Set up change event handler.

    $(".js-Selector").on("change", function(e) {
      // Wire up the UI component with the timezone global.
      GlobalVariables.timezone = e.target.value; // Trigger view refresh.

      $("#select-service").change();
    }); // <option> element formatter.

    function _format_tz(option) {
      if (!option.id) {
        return option.text;
      }

      var country_code =
        option.id in tz_mappings[0].zones
          ? tz_mappings[0].zones[option.id].countries[0].toLowerCase()
          : "";
      return country_code !== ""
        ? $(
            '<span><span class="flag-icon flag-icon-'
              .concat(country_code, '"></span>&nbsp;&nbsp;&nbsp;')
              .concat(option.text, "</span>")
          )
        : option.text;
    }
  }); // Match both individual options and group titles.

  function _matcher(params, data) {
    data.parentText = data.parentText || ""; // Always return the object if there is nothing to compare

    if ($.trim(params.term) === "") {
      return data;
    } // Do a recursive check for options with children

    if (data.children && data.children.length > 0) {
      // Clone the data object if there are children
      // This is required as we modify the object to remove any non-matches
      var match = $.extend(true, {}, data); // Check each child of the option

      for (var c = data.children.length - 1; c >= 0; c--) {
        var child = data.children[c];
        child.parentText +=
          data.parentText +
          " " +
          data.text +
          " " +
          (data.id ? data.id.replace("_", " ") : "") +
          " " +
          (data.country_en ? data.country_en.replace("_", " ") : "");

        var matches = _matcher(params, child); // If there wasn't a match, remove the object in the array

        if (matches == null) {
          match.children.splice(c, 1);
        }
      } // If any children matched, return the new object

      if (match.children.length > 0) {
        return match;
      } // If there were no matching children, check just the plain object

      return _matcher(params, match);
    } // If the typed-in term matches the text of this term, or the text from any
    // parent term, then it's a match.

    var original = (
      data.parentText +
      " " +
      data.text +
      " " +
      (data.id ? data.id.replace("_", " ") : "") +
      " " +
      (data.country_en ? data.country_en.replace("_", " ") : "")
    ).toUpperCase();
    var term = params.term.toUpperCase(); // Check if the text contains the term

    if (original.indexOf(term) > -1) {
      return data;
    } // If it doesn't contain the term, don't return anything

    return null;
  } // Function generator producing groupers of objects by property.

  var _groupBy = function _groupBy(key) {
    return function(array) {
      return array.reduce(function(grouped, cur) {
        var value = cur[key]; // Find a group in `grouped` with its `text` value equal to `cur[key]`.

        var group = {};
        group = grouped.find(function(x) {
          return x.text === cur[key];
        }); // If the object does not exist, create it and initialize its `children` value to [ ].

        if (!group) {
          group = {
            text: cur[key],
            children: []
          };
          grouped.push(group);
        } // Push [cur] to said `children` key.

        group.children.push(cur);
        return grouped;
      }, []);
    };
  };
}

